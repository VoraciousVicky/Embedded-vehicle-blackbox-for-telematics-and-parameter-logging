/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <string.h> // For strlen

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define RX_BUFFER_SIZE 128 // Define a buffer size for receiving data
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart5;

/* USER CODE BEGIN PV */
uint8_t RxBuffer[RX_BUFFER_SIZE]; // Buffer to store received data
uint8_t TxData[] = "Hello from STM32!\n"; // Data to send
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_UART5_Init(void);
/* USER CODE BEGIN PFP */
void UART_Transmit_String(UART_HandleTypeDef *huart, const char *str);
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_UART5_Init();
  /* USER CODE BEGIN 2 */
  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart5, RxBuffer, 1); // Receive one byte at a time to trigger callback on each byte
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Transmit data every 2 seconds
    UART_Transmit_String(&huart5, (const char*)TxData);
    HAL_Delay(2000); // Wait for 2 seconds

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE(); // Enable clock for GPIOC (for UART5 TX - PC12)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  // Configure UART5 Pins: PC12 (TX), PD2 (RX)
  // These pins are automatically configured by HAL_UART_Init when UART5 is enabled.
  // However, it's good practice to ensure their clocks are enabled.
  // __HAL_RCC_GPIOD_CLK_ENABLE() is already there.
  // __HAL_RCC_GPIOC_CLK_ENABLE() has been added above.
  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/**
  * @brief  Transmits a string over UART.
  * @param  huart: Pointer to UART_HandleTypeDef structure.
  * @param  str: Null-terminated string to transmit.
  * @retval None
  */
void UART_Transmit_String(UART_HandleTypeDef *huart, const char *str)
{
    HAL_UART_Transmit(huart, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
}

/**
  * @brief  Rx Transfer completed callbacks.
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  * the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == UART5)
    {
        // For simplicity, let's just re-enable reception for the next byte
        // In a real application, you'd process the received byte(s) here
        // and handle buffering of incoming data to form a complete message.
        // For demonstration, we'll echo the received character back.
        HAL_UART_Transmit(&huart5, RxBuffer, 1, HAL_MAX_DELAY); // Echo back
        HAL_UART_Receive_IT(&huart5, RxBuffer, 1); // Re-enable reception for the next byte
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  * where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

Explanation of STM32 Code Changes:

    #include <string.h>: Needed for strlen() function.
    #define RX_BUFFER_SIZE 128: Defines a buffer size for incoming data.
    uint8_t RxBuffer[RX_BUFFER_SIZE];: The buffer where received UART data will be stored.
    uint8_t TxData[] = "Hello from STM32!\n";: Sample data to be sent. \n is a newline character, useful for terminal readability.
    UART_Transmit_String(UART_HandleTypeDef *huart, const char *str): A helper function to transmit null-terminated strings easily.
    HAL_UART_Receive_IT(&huart5, RxBuffer, 1); in main(): This is crucial. It starts the UART reception in interrupt mode. When a single byte is received, the HAL_UART_RxCpltCallback function will be called. Receiving one byte at a time simplifies the callback for immediate processing, but for larger messages, you'd implement a more sophisticated receive buffer management (e.g., ring buffer).
    HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart): This is the UART receive complete interrupt callback function.
        It checks if the interrupt is from huart5.
        For this example, it simply echoes the received byte back. In a real application, you would process RxBuffer[0] (the received byte) and potentially assemble a full message if you're expecting more than one byte.
        HAL_UART_Receive_IT(&huart5, RxBuffer, 1);: It's vital to re-enable reception after each successful byte reception in interrupt mode, otherwise, no more bytes will be received.
    UART_Transmit_String(&huart5, (const char*)TxData); in while(1) loop: This sends the TxData string every 2 seconds.
    HAL_Delay(2000);: Introduces a delay.

2. Interrupt Configuration (CUBEIDE/CUBEMX)

You'll need to enable the UART5 global interrupt in STM32CubeIDE/CubeMX.

    In CubeMX, go to System Core → NVIC.

    Find UART5 global interrupt and check the box to enable it.

    Set the Preemption Priority and Sub Priority as needed (default is usually fine for simple applications).

    Generate the code. This will add the necessary interrupt handler in stm32f4xx_it.c:
    C

    // stm32f4xx_it.c (automatically generated)
    extern UART_HandleTypeDef huart5; // Make sure this is declared as extern

    void UART5_IRQHandler(void)
    {
      /* USER CODE BEGIN UART5_IRQn 0 */

      /* USER CODE END UART5_IRQn 0 */
      HAL_UART_IRQHandler(&huart5);
      /* USER CODE BEGIN UART5_IRQn 1 */

      /* USER CODE END UART5_IRQn 1 */
    }
